from telethon import TelegramClient, events
import os
import subprocess
import time
import pyautogui  # Utilis√© pour prendre une capture d'√©cran

# Remplacez par vos informations appropri√©es
api_id = '20978790'  # Votre API ID Telegram
api_hash = 'b4df337d80faa487e8bbd2d12253f515'  # Votre API Hash Telegram
bot_token = '7567541541:AAH9pEbAiEfMVjNcVeC70Rmm50VKoJ3gJdE'  # Votre token de bot

# Cr√©er une instance du bot
client = TelegramClient('new_gameboy_bot_session', api_id, api_hash).start(bot_token=bot_token)

# Commande /start pour accueillir l'utilisateur
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond(
        "Bienvenue sur GameBoy Emulator Bot ! üéÆ\n"
        "Envoyez une ROM Game Boy (.gb ou .gbc) pour commencer √† jouer. Utilisez /help pour plus d'informations."
    )

# Commande /help pour expliquer les fonctionnalit√©s du bot, y compris o√π trouver des ROMs
@client.on(events.NewMessage(pattern='/help'))
async def help(event):
    await event.respond(
        "/start - Pour d√©marrer le bot.\n"
        "/help - Pour voir cette aide.\n"
        "Envoyez une ROM Game Boy (.gb ou .gbc) pour jouer.\n\n"
        "Vous pouvez trouver des ROMs Game Boy et Game Boy Advance compatibles gratuitement sur :\n"
        "- [Vimm's Lair](https://vimm.net/?p=vault)\n\n"
        "Veuillez v√©rifier les lois sur la propri√©t√© intellectuelle dans votre pays avant de t√©l√©charger des ROMs."
    )

# G√©rer l'envoi d'une ROM
@client.on(events.NewMessage)
async def handle_rom(event):
    if event.message.file and (event.message.file.name.endswith('.gb') or event.message.file.name.endswith('.gbc')):
        await event.respond("ROM re√ßue ! ‚è≥ Veuillez patienter pendant l'√©mulation...")

        try:
            # T√©l√©chargez la ROM envoy√©e
            rom_path = await event.message.download_media()

            # Lancer RetroArch avec le c≈ìur Gambatte pour √©muler la ROM
            subprocess.Popen([
                "C:/RetroArch-Win64/retroarch.exe", "-L", "C:/RetroArch-Win64/cores/gambatte_libretro.dll", rom_path
            ])

            # Attendre quelques secondes pour laisser le jeu d√©marrer
            time.sleep(10)  # Attendre 10 secondes (vous pouvez ajuster selon la vitesse de d√©marrage)

            # Prendre une capture d'√©cran du bureau
            screenshot_path = "screenshot.png"
            pyautogui.screenshot(screenshot_path)

            # Envoyer la capture d'√©cran √† l'utilisateur
            if os.path.exists(screenshot_path):
                await client.send_file(event.chat_id, screenshot_path)

                # Supprimer les fichiers temporaires
                os.remove(rom_path)
                os.remove(screenshot_path)
            else:
                await event.respond("√âchec de l'√©mulation : la capture d'√©cran n'a pas √©t√© g√©n√©r√©e.")
        except Exception as e:
            await event.respond(f"Une erreur s'est produite lors de l'√©mulation : {e}")
    elif event.message.text:
        await event.respond("Je ne comprends pas ce message ü§î. Utilisez /help pour voir ce que je peux faire.")

# Lancer le bot
client.run_until_disconnected()
